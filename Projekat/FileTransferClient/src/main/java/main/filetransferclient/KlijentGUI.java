package main.filetransferclient;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import static java.nio.file.Files.size;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static javax.xml.bind.DatatypeConverter.parseDateTime;
import javax.swing.JCheckBox;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableCellEditor;
import javax.swing.DefaultCellEditor;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import static java.awt.SystemColor.info;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.ServerSocket;
import main.common.FileInformation;

public class KlijentGUI extends javax.swing.JFrame {

    private Klijent client;
    private static final String FILE_PATH = "file_registry.txt"; // Lokacija fajla //TREBAM PROVERITI OVU PUTANJU FAJLA!!! ISPRAVNA JE /Users/veljkogavrilovic/NetBeansProjects/Projekat/FileTransferServer/fajlovi.txt
    
    
    private static final int SEED_PORT = 6000;

    private long selectedFileSize = 0; // Čuva veličinu izabranog fajla

    /**
     * Creates new form KlijentGUI
     */
    public KlijentGUI() {
        
        initComponents();
        
        pokreniSeedServer();
        
        loadFilesToTable();

    }
    
    public void pokreniSeedServer() {
        
        new Thread(() -> {
            try (ServerSocket socketServer = new ServerSocket(SEED_PORT)) {
                System.out.println("Seeder je spreman, port " + SEED_PORT);
                while (true) {
                    Socket socketKlijent = socketServer.accept();
                    System.out.println("Povezao se downloader: " + socketKlijent.getInetAddress());
                    
                    

                    DataInputStream dis = new DataInputStream(socketKlijent.getInputStream());
                    DataOutputStream dos = new DataOutputStream(socketKlijent.getOutputStream());

                    
                    String zahtev = dis.readUTF(); //ocekuje npr lokaciju fajla
                    System.out.println("Zahtevano: " + zahtev);
                    
                    File fajl = new File(zahtev); // /Users/blabla/index.html
                    if (fajl.exists()) {
                        
                            long fileLength = fajl.length();
                            dos.writeLong(fileLength);
                            dos.flush();

                            

                try (BufferedInputStream bis = new BufferedInputStream(new FileInputStream(fajl))) {

                            byte[] buffer = new byte[4096];
                            int bytesRead;
                            while ((bytesRead = bis.read(buffer)) != -1) {
                                dos.write(buffer, 0, bytesRead);
                            }
                            dos.flush();
                }

                System.out.println("Fajl poslat."); 

                        
                    } else {
                        System.out.println("Fajl ne postoji, saljem velicinu 0");
                        dos.writeLong(0);
                        dos.flush();
                        
                    }

                }   
            } catch (IOException e) {
                e.printStackTrace();
            }
        }).start();   
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        clearFileLocationBtn = new javax.swing.JButton();
        addFileLocationBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        fileLocationTextField = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        fileSearchTextField = new javax.swing.JTextField();
        SearchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 153));
        jPanel1.setFocusable(false);

        jPanel2.setBackground(new java.awt.Color(255, 255, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 0, 13))); // NOI18N

        clearFileLocationBtn.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        clearFileLocationBtn.setText("Clear File Location");
        clearFileLocationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFileLocationBtnActionPerformed(evt);
            }
        });

        addFileLocationBtn.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        addFileLocationBtn.setText("Add File Location");
        addFileLocationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFileLocationBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        fileLocationTextField.setEditable(false);
        fileLocationTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fileLocationTextField.setToolTipText("");
        fileLocationTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileLocationTextFieldActionPerformed(evt);
            }
        });

        addBtn.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clearFileLocationBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                        .addComponent(addFileLocationBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(fileLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(addFileLocationBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(clearFileLocationBtn)
                .addGap(18, 18, 18)
                .addComponent(fileLocationTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteBtn)
                .addGap(25, 25, 25))
        );

        jTable1.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "File Name", "Size", "Upload Date", "Download", "ID"
            }
        ));
        jTable1.setDragEnabled(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumn("Download").setCellRenderer(new ButtonRenderer());
        jTable1.getColumn("Download").setCellEditor(new ButtonEditor(new JCheckBox()));
        jTable1.setRowHeight(30);

        fileSearchTextField.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        fileSearchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileSearchTextFieldActionPerformed(evt);
            }
        });

        SearchButton.setFont(new java.awt.Font("Arial Black", 0, 13)); // NOI18N
        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(fileSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(SearchButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteBtnActionPerformed


    private void addFileLocationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFileLocationBtnActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select a file to share");
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY); // Only files, not directories

        //file chooser dialog
        int returnValue = fileChooser.showOpenDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            //get selected file
            File selectedFile = fileChooser.getSelectedFile();

            //file location
            fileLocationTextField.setText(selectedFile.getAbsolutePath());

            selectedFileSize = selectedFile.length();

            System.out.println("Selected file: " + selectedFile.getAbsolutePath());
            System.out.println("File size " + selectedFileSize + " bytes");

        }

    }//GEN-LAST:event_addFileLocationBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed

        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        String formattedDateTime = now.format(formatter);

        //uzimam putanju fajla i velicinu fajla
        String filePath = fileLocationTextField.getText();

        String[] delovi = filePath.split("/");

        String nazivFajla = delovi[delovi.length - 1];

        File file = new File(filePath);

        File fileNaziv = new File(nazivFajla);

        if (file.exists()) {
            long selectedFileSize = file.length(); //velicina fajla u bajtovima
            String fileSizeFormatted = formatFileSize(selectedFileSize);
            
            int id = sendFileIntoServer(filePath, fileSizeFormatted);
            
            javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel(); //dodavanje fajla u tabelu
            removeEmptyRows(model);
            Object[] testRow = {fileNaziv, fileSizeFormatted, formattedDateTime, "Download", id};
            model.addRow(testRow);

        } else {
            JOptionPane.showMessageDialog(this, "File does not exist.");
        }
    }//GEN-LAST:event_addBtnActionPerformed
    //----------------------------------------------------------

    //METOD ZA FORMATIRANJE VELICINE FAJLA
    private String formatFileSize(long size) {
        if (size >= 1024 * 1024) {
            return String.format("%.2f MB", size / (1024.0 * 1024.0));
        } else if (size >= 1024) {
            return String.format("%.2f KB", size / 1024.0);
        } else {
            return size + " B";
        }
    }

    private void removeEmptyRows(javax.swing.table.DefaultTableModel model) {
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            boolean isEmpty = true;

            // Prolazimo kroz svaki red i proveravamo da li je prazan
            for (int j = 0; j < model.getColumnCount(); j++) {
                if (model.getValueAt(i, j) != null && !model.getValueAt(i, j).toString().trim().isEmpty()) {
                    isEmpty = false;
                    break;
                }
            }

            if (isEmpty) {
                model.removeRow(i);
            }
        }
    }

    private int sendFileIntoServer(String filePath, String fileSize) {
        
        int id = -1; // vrednost ako nesto ne valja
        
        try {
            
            //ovde bi bilo dobro dobijati id sa strane servera
                        
            Socket socket = new Socket("127.0.0.1", 12345);

            PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);
            
            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));

            //Dobijanje lokalne ip adrese racunara
            String localIPAdress = InetAddress.getLocalHost().getHostAddress();

            //kreiram String koji ce se cuvati u notes
            String uploadDate = new SimpleDateFormat("dd-MM-yyyy").format(new Date());
            
            
            //prvo saljem bez id, njega pravim u serveru pa onda dodajem ovde
            String fileInfo = localIPAdress + ";" + filePath + ";" + fileSize + ";" + uploadDate;//id da dodam
         
            writer.println(fileInfo);

            
            String idString = reader.readLine();
            id = Integer.parseInt(idString);
            
            
            String finalFileInfo = fileInfo + ";" + id; //ovde uzimam id kojeg sam dodelio na serveru i dodajem ga ovde
            writer.println(finalFileInfo);
           

            System.out.println("Finalni zapis za upis u fajl: " + finalFileInfo);
            
            writer.close();
            reader.close();
            socket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return id;
    }

    private void loadFilesToTable() { //ovo mi znaci da kada iskljucim i ukljucim server da se ucitaju podaci jer se u suprotnom gube
        File file = new File("/Users/veljkogavrilovic/NetBeansProjects/Projekat/filetransferserver/fajlovi.txt"); ////TREBAM PROVERITI OVU PUTANJU FAJLA!!! ISPRAVNA JE /Users/veljkogavrilovic/NetBeansProjects/Projekat/FileTransferServer/fajlovi.txt
        if (!file.exists()) {
            return;
        }
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;

            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

            while ((line = br.readLine()) != null) {

                String[] data = line.split(";");

                if (data.length >= 5) {
                    String naziv = data[1];
                    String velicina = data[2];
                    String datum = data[3];
                    String id = data[4];
                    

                    String[] delovi = naziv.split("/");
                    String nazivFajla = delovi[delovi.length - 1];
                    Object[] row = {nazivFajla, velicina, datum, "download", id}; //prilikom otvaranja aplikacije, ovi podaci se upisuju u tabelu, da bi tabela pamtila i kad se server ugasi
                    model.addRow(row);
                    removeEmptyRows(model);
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    //----------------------------------------------------------

    private void clearFileLocationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFileLocationBtnActionPerformed
        fileLocationTextField.setText("");

    }//GEN-LAST:event_clearFileLocationBtnActionPerformed

    private void fileLocationTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileLocationTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileLocationTextFieldActionPerformed

    private void fileSearchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileSearchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileSearchTextFieldActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed

        // ovo je za search u tabeli
        String searchText = fileSearchTextField.getText().toLowerCase().trim();

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        try (Scanner scanner = new Scanner(new File("/Users/veljkogavrilovic/NetBeansProjects/FileTransferServer/fajlovi.txt"))) { //TREBAM PROVERITI OVU PUTANJU FAJLA!!! ISPRAVNA JE /Users/veljkogavrilovic/NetBeansProjects/Projekat/FileTransferServer/fajlovi.txt

            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] data = line.split(";");

                if (data.length >= 4) {
                    String putanja = data[1];
                    File f = new File(putanja);
                    String fileName = f.getName();

                    if (fileName.toLowerCase().contains(searchText)) {
                        String velicina = data[2];
                        String datum = data[3];

                        Object[] row = {fileName, velicina, datum, "download"};
                        model.addRow(row);

                    }
                }

            }

        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Greska pri citanju fajla.");
        }
    }//GEN-LAST:event_SearchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KlijentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KlijentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KlijentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KlijentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KlijentGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SearchButton;
    private javax.swing.JButton addBtn;
    private javax.swing.JButton addFileLocationBtn;
    private javax.swing.JButton clearFileLocationBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTextField fileLocationTextField;
    private javax.swing.JTextField fileSearchTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private String formantFileSize(long length) {

        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private String getCurrentDate() {
        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        return sdf.format(new java.util.Date());
    }

// Prikazujem dugme u celiji
    class ButtonRenderer extends JButton implements TableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            setText("Download");
            return this;
        }

    }

//  klik na dugme u celiji
    class ButtonEditor extends DefaultCellEditor {

        protected JButton downloadButton;
        private String label;
        private boolean isPushed;

        public ButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            downloadButton = new JButton();
            downloadButton.setOpaque(true);

            downloadButton.addActionListener(e -> fireEditingStopped());

        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {
            label = "Download";
            downloadButton.setText(label);
            isPushed = true;
            return downloadButton;
        }

        @Override
        public Object getCellEditorValue() {
            if (isPushed) {
                System.out.println("Kliknuto na: " + label);
                System.out.println("Pokrećem thread sada.");
                Klijent klijent = new Klijent();
                new Thread(() -> {
                    try {
                        System.out.println("Thread je startovan.");
                        JTable table = jTable1;
                        int red = table.getSelectedRow();
                        String idd = table.getValueAt(red, 4).toString(); //kolona 0 ako je ime fajla tu
                        FileInformation info = zahtevajFajlOdServera(idd);
                        
                        if (info != null) {
                            
                            
                            System.out.println("Pocinjem da preuzimanje sa " + info.getIpAdresa() + " fajla: " + info.getLokacija());
                            
                            String lokalnaPutanja = "Downloads/" + new File(info.getLokacija()).getName();
                            preuzmiFajl(info.getIpAdresa(), 6000, info.getLokacija(), lokalnaPutanja);
                        }
                        
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }).start();
                System.out.println("Thread pokrenut");
            }
            isPushed = false;
            return label;
        }

        @Override
        public boolean stopCellEditing() {
            isPushed = false;
            return super.stopCellEditing();
        }
    }
    
    
    public FileInformation zahtevajFajlOdServera(String idd) {
        try (Socket socket = new Socket("127.0.0.1", 12345); //adresa servera i port
                BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream())); //saljem klijentu
                PrintWriter pw = new PrintWriter(socket.getOutputStream(), true)) { //saljem serveru
            pw.println("download;" + idd);
            pw.flush();
            String response = br.readLine(); //citam server sta kaze
            if (response == null || response.isEmpty()) {
                System.out.println("Nema odgovora servera ili je prazan");
                return null; //fajl nije pronadjen ili nema podataka
            }
            System.out.println("Odgovor servera: " + response);
            String[] parts = response.split(";");
            
            if (parts.length < 3) {
                System.out.println("Neispravan odgovor servera! Nedovoljno delova: " + parts.length); //greska se javlja pa ovim se to resava
                return null;
            }
            
            String ip = parts[0];
            String location = parts[1];
            int id = Integer.parseInt(parts[2]);
            
            return new FileInformation(ip, location, id);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
    
    
    public void preuzmiFajl(String ip, int port, String remotePath, String localPath) throws IOException {
        
        System.out.println("Pokušavam da se povežem na IP: " + ip + " i port: " + port);
        
        File outputFile = new File(localPath);

        System.out.println("Putanja na disku: " + outputFile.getAbsolutePath());

        
         String folderName = "Downloads";
            File downloadsDir = new File("Downloads");
            if (!downloadsDir.exists()) {
                boolean created = downloadsDir.mkdirs(); //kreira direktorijum
                System.out.println("Folder " + folderName + " kreiran:" + created);
            }
            
        try (Socket socket = new Socket(ip, port);

                DataOutputStream dos = new DataOutputStream(socket.getOutputStream());
                DataInputStream dis = new DataInputStream(socket.getInputStream());
                FileOutputStream fos = new FileOutputStream(localPath)) {           
            // putanja fajla koju zelim da preuzmem
            
            dos.writeUTF(remotePath);
            dos.flush();
            

            //velicina fajla

            long fileSize = dis.readLong(); //OVDE JE NEKI PROBLEM XD

            System.out.println("POCINJEM PREUZIMANJE FAJLA!!!");    

            
            System.out.println("Velicina fajla za preuzimanje: " + fileSize + " bajtova.");
                   
            if (fileSize == 0) {
                System.out.println("Fajl ne postoji ili je prazan.");
                return;
            }
            
            byte[] buffer = new byte[4096];
            int read;
            long totalRead = 0;
         
        while ((read = dis.read(buffer, 0, Math.min(buffer.length, (int)(fileSize - totalRead)))) > 0) {
            fos.write(buffer, 0, read);
            totalRead += read;
            
            if (totalRead >= fileSize) break;
                   
                }
        
        System.out.println("Fajl je preuzet i sacuvan na: " + localPath);
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    
    /*
1. Funkcionalnost preuzimanja fajla — kod trenutno samo šalje informacije, ali ne preuzima stvarni fajl.
3. Provera i rukovanje greškama — šta se dešava ako fajl ne postoji, ako veza padne, itd.
4. User interface (GUI) — da omogućiš korisniku da bira fajlove, pokrene download i vidi status.
5. Mogućnost čuvanja i učitavanja više fajlova — recimo, lista fajlova koja se može pretraživati.
6. Implementacija baze podataka — da ne zavisiš od tekstualnog fajla, ali to može biti i kasnije.
7. Testiranje i eventualno podešavanje mrežne komunikacije za rad preko različitih računara (ne samo lokalno).
    
    postoji problem kada ucitavam neki fajl, a ima razmak(ja pretpostavljam da je zbog toga) onda ga ne ucitava kako treba),
    127.0.0.1;/Users/veljkogavrilovic/Applications/Chrome Apps.localized/Icon ovaj fajl je u pitanju
    
    */
    
    
    /*
2. Srediti to kada se klikne download, da se bas salje informacija za taj fajl
    
    
    */
    
    
}
